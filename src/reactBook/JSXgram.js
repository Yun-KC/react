/* JSX문법 <- 문법이 적용되는 범위는 컴포넌트 안에 return 안의 내용들이다 
1. 모든 요소들은 하나의 태그로 감싸야한다 
    이유는 Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리로 구조를 이루어져야 한다는 규칙이 있기 때문. 
2. JSX 내부에서 자바스크립트 표현식을 쓰려면 {}로 감싸면 된다.
3. JSX 내부의 자바스크립트 표현식에서 if 문을 사용할 수는 없다. JSX 외부에서 if를 사용해 값을 설정하거나, {} 안에 조건부 연산자를 사용하면 된다.(삼항연산자)
    AND 연산자(&&) 를 사용해 조건부 렌더링을 구현할 수도 있다.
4. DOM 요소에 스타일을 적용할 때는 문자열 형태가 아니라! 객체 형태로 넣어줘야 한다.
    스타일 이름중 background-color처럼 - 가 문자에 포함되는 이름은 - 를 없애고 카멜 표기법으로 작성해야한다. backgroundColor
    객체 값으로는 문자열 ''로 표기해야한다. css파일을 건드릴 때랑 표기 방법이 다르니 잘 확인해서 써야한다.( css 에서는 스타일 속성 값을 '' 로 감싸지 않아도 된다.)
5. HTML 요소에 class를 지정하고 싶을 때는 class 대신 className를 사용한다. 
6. 태그들은 항상 닫는 태그와 같이 사용해야한다. input태그는 HTML 에서 닫지 않아도 사용할 수 있는 태그지만 JSX 문법에서는 꼭 닫아줘야 한다.
    태그 사이에 별도의 내용이 들어가지 않는 경우에는 <input /> 이렇게 태그 선언과 동시에 닫을 수 있다.
7. JSX 안에서 주석을 작성하는 방법은 아래 예시 참조!
*/

function JSX() {
  const name = '리액트';
  const backColor = { backgroundColor: 'aqua'};
  return (
    <div //시작 태그를 여러 줄로 작성하게 된다면 여기에 주석을 작성할 수 있습니다.
    >
      {/*주석은 이곳에 이렇게 작성할 수 있습니다*/}
      <h1 style = {{ color: 'red' }}>{name} 나는 4번 인라인 스타일링 예시!</h1>  
      <h2 style = { backColor }> 나도 4번 인라인 스타일링 예시!</h2>
      <p style = {{fontWeight: 'bold', backgroundColor: 'blue'}}> 요기는 삼항연산자 예시!
        {name === '리액트' ? <h3>무야호오</h3> : <h3>노노웅</h3>}
        {name === '리액트' && <h3>무야야야야야</h3>}
      </p>
      <div className = "react"> 나는 5번 클래스 지정 예시!</div>
      <input value="나는 6번 예시!"></input>
      <div> /* // 나는 7번예시! 내가 보이면 주석처리가 안된겨! */</div>
    </div>
  );
  }

  export default JSX;